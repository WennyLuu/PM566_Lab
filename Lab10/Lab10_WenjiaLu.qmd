---
title: "PM566 Lab10"
author: "Wenjia Lu"
format:
  html:
    embed-resources: true
---

```{r}
## Set packages and download data ##

library(RSQLite) 
library(DBI)
library(data.table)

# Initialize a temporary in memory database 
con <- dbConnect(SQLite(), ":memory:")

# Download tables 
actor <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/actor.csv") 
rental <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/rental.csv") 
customer <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/customer.csv") 
payment <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/payment_p2007_01.csv")
# Copy data.frames to database 
dbWriteTable(con, "actor", actor) 
dbWriteTable(con, "rental", rental) 
dbWriteTable(con, "customer", customer) 
dbWriteTable(con, "payment", payment)

dbListTables(con)
```

```{r}
#see the structure of a table
dbGetQuery(con,"
           PRAGMA table_info(actor)
           "
)

```

```{sql, connection=con, output.var= "x1"}
PRAGMA table_info(actor)

```

```{r}
x1

```

```{r}
## Exercise 1 ##

# Retrieve the actor ID, first name and last name for all actors using the actor table. Sort by last name and then by first name.

dbGetQuery(con,"
SELECT actor_id, first_name, last_name
FROM actor
ORDER by last_name, first_name
LIMIT 15
")

```

```{sql, connection=con}

SELECT actor_id, first_name, last_name
FROM actor
ORDER by last_name, first_name
LIMIT 15

```

```{r}
## Exercise 2 ##

# Retrieve the actor ID, first name, and last name for actors whose last name equals ‘WILLIAMS’ or ‘DAVIS’.

dbGetQuery(con,"
SELECT actor_id, first_name, last_name
FROM actor 
WHERE last_name IN ('WILLIAMS', 'DAVIS')
ORDER BY last_name
")

```

```{r}
## Exercise 3 ##

# Write a query against the rental table that returns the IDs of the customers who rented a film on July 5, 2005 (use the rental.rental_date column, and you can use the date() function to ignore the time component). Include a single row for each distinct customer ID.

dbGetQuery(con,"
           PRAGMA table_info(rental)
           "
)

dbGetQuery(con,"
SELECT DISTINCT customer_id, rental_date
FROM rental
WHERE date(rental_date) = '2005-07-05'
")

dbGetQuery(con,"
SELECT DISTINCT customer_id,
COUNT (*) AS N
FROM rental
WHERE date(rental_date) = '2005-07-05'
GROUP BY customer_id
")

```

```{r}
## Exercise 4 ##

# Exercise 4.1
# Construct a query that retrieves all rows from the payment table where the amount is either 1.99, 7.99, 9.99.
dbGetQuery(con,"
           PRAGMA table_info(payment)
           "
)

dbGetQuery(con,"
SELECT *
FROM payment
WHERE amount IN (1.99, 7.99, 9.99)
LIMIT 15
")

# Exercise 4.2
# Construct a query that retrieves all rows from the payment table where the amount is greater then 5.
dbGetQuery(con,"
SELECT *
FROM payment
WHERE amount >5
LIMIT 15
")

# Exercise 4.3
# Construct a query that retrieves all rows from the payment table where the amount is greater then 5 and less then 8.
dbGetQuery(con,"
SELECT *
FROM payment
WHERE amount >5 AND amount <8
LIMIT 15
")

```

```{r}
## Exercise 5 ##

# Retrieve all the payment IDs and their amounts from the customers whose last name is ‘DAVIS’.

dbGetQuery(con,"
           PRAGMA table_info(customer)
           "
)

dbGetQuery(con,"
SELECT c.customer_id, c.last_name, p.payment_id, p.amount
FROM customer AS c INNER JOIN payment AS p
  ON c.customer_id = p.customer_id
  WHERE c.last_name IN ('DAVIS')
/* WHERE c.last_name == 'DAVIS' */  /* This is a comment */
")

```

```{r}
## Exercise 6 ##

# Exercise 6.1
# Use COUNT(*) to count the number of rows in rental.
dbGetQuery(con,"
SELECT COUNT(*) AS count
FROM rental
")

# Exercise 6.2
# Use COUNT(*) and GROUP BY to count the number of rentals for each customer_id.
dbGetQuery(con,"
SELECT customer_id, COUNT(*) AS count
FROM rental
GROUP BY customer_id
LIMIT 15
")

# Exercise 6.3
# Repeat the previous query and sort by the count in descending order.
dbGetQuery(con,"
SELECT customer_id, COUNT(*) AS count
FROM rental
GROUP BY customer_id
ORDER BY count DESC
LIMIT 15
")

# Exercise 6.4
# Repeat the previous query but use HAVING to only keep the groups with 40 or more.
dbGetQuery(con,"
SELECT customer_id, COUNT(*) AS count
FROM rental
GROUP BY customer_id
HAVING count >=40
ORDER BY count DESC
")

```

```{r}
## Exercise 7 ##

# Exercise 7.1
# Modify the above query to do those calculations for each customer_id.
dbGetQuery(con,"
SELECT customer_id,
       MAX(amount) AS maxpayment,
       MIN(amount) AS minpayment,
       AVG(amount) AS avgpayment,
       SUM(amount) AS sumpayment
FROM payment
GROUP BY customer_id
LIMIT 15
")

# Exercise 7.2
# Modify the above query to only keep the customer_ids that have more then 5 payments.
dbGetQuery(con,"
SELECT customer_id,
       COUNT (*)  AS N,
       MAX(amount) AS maxpayment,
       MIN(amount) AS minpayment,
       AVG(amount) AS avgpayment,
       SUM(amount) AS sumpayment
FROM payment
GROUP BY customer_id
HAVING N >5
")

```

```{r}

## Cleanup ##

# Run the following chunk to disconnect from the connection
dbDisconnect(con)

```

