---
title: "PM566 Lab04"
author: "Wenjia Lu"
format:
  html:
    embed-resources: true
---

```{r}
## Load the data ##
library('R.utils')
library(data.table)
library(dtplyr)
library(dplyr)
library(ggplot2)
library(leaflet)

# Where are we getting the data from
met_url <- "https://github.com/USCbiostats/data-science-data/raw/master/02_met/met_all.gz"
# Downloading the data to a tempfile (so it is destroyed afterwards)
tmp <- "met.gz"
# We sould be downloading this, ONLY IF this was not downloaded already.
if (!file.exists(tmp)) {
  download.file(
    url      = met_url,
    destfile = tmp,
  )
}
# Read the data
met <- fread(tmp)
head(met)

# Download the data
stations <- fread("ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-history.csv")
stations[, USAF := as.integer(USAF)]
# Dealing with NAs and 999999
stations[, USAF   := fifelse(USAF == 999999, NA_integer_, USAF)]
stations[, CTRY   := fifelse(CTRY == "", NA_character_, CTRY)]
stations[, STATE  := fifelse(STATE == "", NA_character_, STATE)]
# Selecting the three relevant columns, and keeping unique records
stations <- unique(stations[, list(USAF, CTRY, STATE)])
# Dropping NAs
stations <- stations[!is.na(USAF)]
# Removing duplicates
stations[, n := 1:.N, by = .(USAF)]
stations <- stations[n == 1,][, n := NULL]
# Merge the data with stations
df<-merge(
  x = met,
  y = stations,
  all.x = T,
  all.y = F,
  by.x = "USAFID",
  by.y = "USAF"
)
head(df)

```


```{r}
## Q1 Representative station for the US ##
# generate a representative of each station. We will use the average (meadian could also be a good way to represent it, but it will depend on the case)

station_avg<-
df[,.(
  temp     = mean(temp,na.rm=T),
  wind.sp  = mean(wind.sp,na.rm =T),
  atm.press= mean(atm.press,na.rm= T)
),by=.(USAFID,STATE)]

medians<-
  station_avg[,.(
  temp_50=quantile(temp,probs=.5,na.rm=T),
  wind.sp_50=quantile(wind.sp, probs=.5,na.rm=T),
  atm.press_50=quantile(atm.press,probs=.5,na.rm=T)
)]
medians

station_avg[,temp_dist:=abs(temp-medians$temp_50)]
median_temp_station<-station_avg[order(temp_dist)][1]
median_temp_station

station_avg[,wind.sp_dist:=abs(wind.sp-medians$wind.sp_50)]
median_windsp_station<-station_avg[order(wind.sp_dist)][1]
median_windsp_station

station_avg[,atm.press_dist:=abs(atm.press-medians$atm.press_50)]
median_atmpress_station<-station_avg[order(atm.press_dist)][1]
median_atmpress_station

# The station that is closest to the median temperature is 720458.
# The station that is closest to the median wind speed is 720929. 
# The station that is closest to the median wind speed is 722238.

```


```{r}
## Q2 Representative station per state ##
# Just like the previous question, you are asked to identify what is the most representative, the median, station per state. This time, instead of looking at one variable at a time, look at the euclidean distance. If multiple stations show in the median, select the one located at the lowest latitude.

station_avg2<-
df[,.(
  temp     = mean(temp,na.rm=T),
  wind.sp  = mean(wind.sp,na.rm =T),
  atm.press= mean(atm.press,na.rm= T)
),by=.(USAFID,STATE)]

station_avg2[,temp_50:=quantile(temp,probs=.5,na.rm=T),by=STATE]

station_avg2[,wind.sp_50:=quantile(wind.sp,probs=.5,na.rm=T),by=STATE]

station_avg2[,atm.press_50:=quantile(atm.press,probs=.5,na.rm=T),by=STATE]

station_avg2[, eudist := sqrt(
  (temp - temp_50)^2 + (wind.sp - wind.sp_50)^2)]

station_avg2[ , .SD[which.min(eudist)], by = STATE]

# The station with the lowest euclidean distance between temperature and wind speed is `r median_atmpress_station$USAFID`.

```


```{r}
## Q3 In the middle? ##
# For each state, identify what is the station that is closest to the mid-point of the state. Combining these with the stations you identified in the previous question, use leaflet() to visualize all ~100 points in the same figure, applying different colors for those identified in this question.

station_avg2[, midpoint := sqrt(
  ((temp - temp_50)^2 + (wind.sp - wind.sp_50)^2) / 2
                              )]

map <- station_avg2[ , .SD[which.min(midpoint)], by = STATE]

hashtable <- df %>%
  select(USAFID, lat, lon)
hashtable <- distinct(hashtable, USAFID, .keep_all = TRUE)

map2 <- merge(x = map, y = hashtable, by.x = 'USAFID', by.y = "USAFID", all.x = TRUE, all.y = FALSE)

mp.pal <- colorNumeric(c('red','yellow','blue'), domain=map2$midpoint)

tempmap <- leaflet(map2) %>% 

  addProviderTiles('CartoDB.Positron') %>% 

  addCircles(
    lat = ~lat, lng=~lon,
    label = ~paste0(round(temp,2), ' C'), 
    color = ~ mp.pal(midpoint),
    opacity = 1, 
    fillOpacity = 1, 
    radius = 500
    ) %>%

  addLegend('bottomleft', pal=mp.pal, values=map2$midpoint,
          title='Midpoint by State', opacity=1)
tempmap

```


```{r}
## Q4 Means of means ##
# Using the quantile() function, generate a summary table that shows the number of states included, average temperature, wind-speed, and atmospheric pressure by the variable “average temperature level,” which you’ll need to create.
# Start by computing the states’ average temperature. Use that measurement to classify them according to the following criteria:low: temp < 20 Mid: temp >= 20 and temp < 25 High: temp >= 25

df[,state_temp := mean(temp,na.rm=T), by= STATE]
df[,temp_cat := fifelse(
  state_temp < 20,"low-temp",
  fifelse(state_temp < 25, "mid-temp","high_temp"))
  ]

df[, .(
  N_entries = .N,
  N_stations = length(unique(USAFID)),
  N_missing = sum(is.na(.SD)),
  N_states = length(unique(STATE)),
  mean_temperature = mean(temp, na.rm = TRUE),
  mean_windspeed = mean(wind.sp, na.rm = TRUE),
  mean_atmpress = mean(atm.press, na.rm = TRUE)
), by = temp_cat]

table(df$temp_cat, useNA = "always")

```

